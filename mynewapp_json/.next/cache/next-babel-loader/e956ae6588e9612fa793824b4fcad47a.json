{"ast":null,"code":"import bcrypt from 'bcryptjs';\nimport jwt from 'jsonwebtoken';\n/* JWT secret key */\n\nconst KEY = process.env.JWT_KEY;\nconsole.log(`KEY`, KEY);\n/* Users collection sample */\n\nconst USERS = [{\n  id: 1,\n  email: 'example1@example.com',\n  password: '$2y$10$mj1OMFvVmGAR4gEEXZGtA.R5wYWBZTis72hSXzpxEs.QoXT3ifKSq',\n  // password\n  createdAt: '2021-03-29 18:23:45'\n}, {\n  id: 2,\n  email: 'example2@example.com',\n  password: '$2y$10$mj1OMFvVmGAR4gEEXZGtA.R5wYWBZTis72hSXzpxEs.QoXT3ifKSq',\n  // password\n  createdAt: '2021-03-29 18:23:45'\n}, {\n  id: 3,\n  email: 'example3@example.com',\n  password: '$2y$10$mj1OMFvVmGAR4gEEXZGtA.R5wYWBZTis72hSXzpxEs.QoXT3ifKSq',\n  // password\n  createdAt: '2021-03-29 18:23:45'\n}, {\n  id: 4,\n  email: 'example4@example.com',\n  password: '$2y$10$mj1OMFvVmGAR4gEEXZGtA.R5wYWBZTis72hSXzpxEs.QoXT3ifKSq',\n  // password\n  createdAt: '2021-03-29 18:23:45'\n}];\nexport default ((req, res) => {\n  return new Promise(resolve => {\n    const {\n      method\n    } = req;\n\n    try {\n      switch (method) {\n        case 'POST':\n          /* Get Post Data */\n          const {\n            email,\n            password\n          } = req.body;\n          /* Any how email or password is blank */\n\n          if (!email || !password) {\n            return res.status(400).json({\n              status: 'error',\n              error: 'Request missing username or password'\n            });\n          }\n          /* Check user email in database */\n\n\n          const user = USERS.find(user => {\n            return user.email === email;\n          });\n          /* Check if exists */\n\n          if (!user) {\n            /* Send error with message */\n            res.status(400).json({\n              status: 'error',\n              error: 'User Not Found'\n            });\n          }\n          /* Variables checking */\n\n\n          if (user) {\n            const userId = user.id,\n                  userEmail = user.email,\n                  userPassword = user.password,\n                  userCreated = user.createdAt;\n            /* Check and compare password */\n\n            bcrypt.compare(password, userPassword).then(isMatch => {\n              /* User matched */\n              if (isMatch) {\n                /* Create JWT Payload */\n                const payload = {\n                  id: userId,\n                  email: userEmail,\n                  createdAt: userCreated\n                };\n                /* Sign token */\n\n                jwt.sign(payload, KEY, {\n                  expiresIn: 31556926 // 1 year in seconds\n\n                }, (err, token) => {\n                  /* Send succes with token */\n                  res.status(200).json({\n                    success: true,\n                    token: 'Bearer ' + token\n                  });\n                });\n              } else {\n                /* Send error with message */\n                res.status(400).json({\n                  status: 'error',\n                  error: 'Password incorrect'\n                });\n              }\n            });\n          }\n\n          break;\n\n        case 'PUT':\n          break;\n\n        case 'PATCH':\n          break;\n\n        default:\n          break;\n      }\n    } catch (error) {\n      throw error;\n    }\n\n    return resolve();\n  });\n});","map":{"version":3,"sources":["C:/Users/Saksham/mynewapp/mynewapp/pages/api/auth.js"],"names":["bcrypt","jwt","KEY","process","env","JWT_KEY","console","log","USERS","id","email","password","createdAt","req","res","Promise","resolve","method","body","status","json","error","user","find","userId","userEmail","userPassword","userCreated","compare","then","isMatch","payload","sign","expiresIn","err","token","success"],"mappings":"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","sourcesContent":["import bcrypt from 'bcryptjs';\nimport jwt from 'jsonwebtoken';\n\n/* JWT secret key */\nconst KEY = process.env.JWT_KEY;\nconsole.log(`KEY`, KEY);\n/* Users collection sample */\nconst USERS = [\n  {\n    id: 1,\n    email: 'example1@example.com',\n    password: '$2y$10$mj1OMFvVmGAR4gEEXZGtA.R5wYWBZTis72hSXzpxEs.QoXT3ifKSq', // password\n    createdAt: '2021-03-29 18:23:45',\n  },\n  {\n    id: 2,\n    email: 'example2@example.com',\n    password: '$2y$10$mj1OMFvVmGAR4gEEXZGtA.R5wYWBZTis72hSXzpxEs.QoXT3ifKSq', // password\n    createdAt: '2021-03-29 18:23:45',\n  },\n  {\n    id: 3,\n    email: 'example3@example.com',\n    password: '$2y$10$mj1OMFvVmGAR4gEEXZGtA.R5wYWBZTis72hSXzpxEs.QoXT3ifKSq', // password\n    createdAt: '2021-03-29 18:23:45',\n  },\n  {\n    id: 4,\n    email: 'example4@example.com',\n    password: '$2y$10$mj1OMFvVmGAR4gEEXZGtA.R5wYWBZTis72hSXzpxEs.QoXT3ifKSq', // password\n    createdAt: '2021-03-29 18:23:45',\n  },\n];\n\nexport default (req, res) => {\n  return new Promise(resolve => {\n    const { method } = req;\n    try {\n      switch (method) {\n        case 'POST':\n          /* Get Post Data */\n          const { email, password } = req.body;\n          /* Any how email or password is blank */\n          if (!email || !password) {\n            return res.status(400).json({\n              status: 'error',\n              error: 'Request missing username or password',\n            });\n          }\n          /* Check user email in database */\n          const user = USERS.find(user => {\n            return user.email === email;\n          });\n          /* Check if exists */\n          if (!user) {\n            /* Send error with message */\n            res.status(400).json({ status: 'error', error: 'User Not Found' });\n          }\n          /* Variables checking */\n          if (user) {\n            const userId = user.id,\n              userEmail = user.email,\n              userPassword = user.password,\n              userCreated = user.createdAt;\n            /* Check and compare password */\n            bcrypt.compare(password, userPassword).then(isMatch => {\n              /* User matched */\n              if (isMatch) {\n                /* Create JWT Payload */\n                const payload = {\n                  id: userId,\n                  email: userEmail,\n                  createdAt: userCreated,\n                };\n                /* Sign token */\n                jwt.sign(\n                  payload,\n                  KEY,\n                  {\n                    expiresIn: 31556926, // 1 year in seconds\n                  },\n                  (err, token) => {\n                    /* Send succes with token */\n                    res.status(200).json({\n                      success: true,\n                      token: 'Bearer ' + token,\n                    });\n                  },\n                );\n              } else {\n                /* Send error with message */\n                res\n                  .status(400)\n                  .json({ status: 'error', error: 'Password incorrect' });\n              }\n            });\n          }\n          break;\n        case 'PUT':\n          break;\n        case 'PATCH':\n          break;\n        default:\n          break;\n      }\n    } catch (error) {\n      throw error;\n    }\n    return resolve();\n  });\n};\n"]},"metadata":{},"sourceType":"module"}